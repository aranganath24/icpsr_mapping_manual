[["index.html", "A Guide to Mapping ICPSR Data in R Studio 1 Preface", " A Guide to Mapping ICPSR Data in R Studio Aditya Ranganath 2021-09-12 1 Preface This brief guide to mapping ICPSR data in R Studio was prepared as part of Aditya Ranganath’s ICPSR Visiting Representative Fellowship in the summer and fall of 2021. It can be used as a lesson plan for instructors, as well as a tool for self-study. "],["introduction.html", "2 Introduction 2.1 Motivation 2.2 Scope and Objectives", " 2 Introduction 2.1 Motivation Many of ICSPR’s datasets are available in tabular formats that are ready to be imported into standard statistical software packages for analysis. In many cases, it is possible to visualize the data in these tabular datasets on a map (even if such visualizations are not explicitly a part of the original analysis or the replication materials provided by ICPSR). In this tutorial, we will provide a brief example-driven overview of how you can visually represent tabular information from an ICSPR dataset on a map, using packages written for the R programming language. The tutorial does not presuppose any previous experience with statistical analysis or programming. Why map ICPSR data to begin with? Students and researchers often use data archived at ICPSR as a resource for exploration and discovery. Indeed, the data that others have collected can often inspire novel questions and hypotheses. It is also the case that the social and political processes studied by the researchers who archive their data with ICPSR are intrinsically spatial; after all, these processes necessarily occur somewhere on the surface of the earth! Placing these social and political processes in their spatial context can therefore bring the data encoded in tabular datasets to life in dramatic ways, helping us to quickly notice patterns, identify puzzles, and generate hypotheses that would have otherwise remained obscure. In addition to using ICPSR data to generate ideas and explore patterns in existing data, students and researchers may want to reuse ICPSR data and incorporate them into their own ongoing research projects; in reusing this data, they may find it helpful to make publishable maps that they can use in their own papers and projects. 2.2 Scope and Objectives By working through the following code, students and researchers will learn how to spatially visualize existing ICPSR data to aid their exploration of datasets of interest, as well as create publishable maps that can be used in their papers and projects. The tutorial can be used as a self-study resource, as well as the basis for a classroom demonstration or activity. It is important to emphasize that this is not a tutorial on Geographic Information Systems (GIS) writ large, and we do not cover important GIS concepts such as map projections and coordinate reference systems. If you use advanced mapping and spatial analysis in your work, you should learn these technical foundations (which are beyond the scope of our lesson here). It is also not a tutorial on the principles of cartography, which is a complex art and science that is also beyond our scope; however, it will show you how to customize maps in R, and you can use these skills (after reading up on cartography on your own) to make maps that conform to sound cartographic design principles. Our goal here is to make a functional and informative map, not a work of art. "],["preliminaries-and-set-up.html", "3 Preliminaries and Set-Up 3.1 Data 3.2 R and R Studio Installation 3.3 The R Studio Interface 3.4 Install Packages 3.5 Load Libraries 3.6 Set Working Directory", " 3 Preliminaries and Set-Up 3.1 Data The ICPSR data we will be mapping in this tutorial comes from a dataset archived on OPENICPSR. In particular, the dataset we will be using is entitled “Governments’ Responses to COVID-19”, which was collected by Simon Porcher, a researcher at the University of Paris. The dataset can be found here, and the full citation information is below: Porcher, Simon. Governments’ Responses to COVID-19 (Response2covid19). Ann Arbor, MI: Inter-university Consortium for Political and Social Research [distributor], 2020-11-08. https://doi.org/10.3886/E119061V6. This panel dataset provides information on public health and economic interventions initiated by national governments in response to the Covid-19 Pandemic. It provides data in monthly increments from January 2020 to October 2020 for most of the world’s sovereign countries. One of the variables in the dataset is an index (computed based on other variables in the dataset), that reflects the extent of government economic interventions to provide their populations with material support during the most acute phase of the Covid-19 Pandemic. The tutorial will explore how to display this country-level data on economic responses to Covid-19 on a world map. If you would like to follow along with the tutorial, please download the data above to your computer, and save it in a directory that is specifically dedicated to this tutorial. 3.2 R and R Studio Installation If you haven’t already, please go ahead and install R and R Studio. R and R Studio must be installed separately; you should install R first, and then R Studio. R is the bare-bones computing environment, while R Studio is a visually appealing and user-friendly interface that allows you to interact with this environment in an intuitive way. Once you have both installed, you don’t need to open up R and R Studio separately; you only need to interact with R Studio (which will run R in the background). The following subsections provide instructions on installing R and R Studio for the macOS and Windows operating systems. These instructions are taken from the “Setup” section of the Data Carpentry Course entitled R for Social Scientists. The Data Carpentry page also contains installation instructions for the Linux operating system; if you’re a Linux user, please refer to that page for instructions. The Appendix to Garret Grolemund’s book Hands on Programming with R provides an excellent overview of the R and R Studio installation process; you can access it here. 3.2.1 Windows Installation Instructions Download R from the CRAN website Run the .exe file that was just downloaded. Go to the R Studio download page and under Installers select the “Windows” option. Double click the file to install R Studio Open R Studio to make sure it works. 3.2.2 macOS Installation Instructions Download R from the CRAN website Select the .pkg file for the latest R version. Double click on the downloaded file to install R. It is also a good idea to install XQuartz, which some packages require. Go to the R Studio download page, and under Installers select the “macOS” option. Double click the file to install R Studio Open R Studio to make sure it works. 3.3 The R Studio Interface Now that we’ve installed and opened up R Studio, let’s familiarize ourselves with the R Studio interface. When you open up R Studio, you’ll see a window open that looks something like this: Figure 3.1: The R Studio Interface If your interface doesn’t look exactly like this, it shouldn’t be a problem; we would expect to see minor cosmetic differences across operating systems and computers (based on how they’re configured). However, you should see four distinct windows within the larger R Studio interface: The top-left window is known as the Source. The Source window is where you can write your R scripts (including the code associated with this tutorial), and execute those scripts. You can also type in R code into the “Console” window (bottom-left window), but it is preferable to write your code in a script within the source window. That’s because scripts can be saved (while code written into the console cannot); writing scripts therefore allows you to keep track of what you’re doing, and facilitates the reproducibility of your work. Note that in some cases, you may not see a Source window when you first open R Studio. In that case, to start a new script, simply click the File button on the R Studio menu bar, scroll down to New File button, and then select R Script from the menu bar that opens up. It’s also worth noting that the outputs of certain functions will appear in the Source window. In the context of our tutorial, when we want to view our tabular datasets or attribute tables (an attribute table is a table that provides information about the attributes of different geographic locations in a spatial dataset), we will use the View() function, which will display the relevant data within a new tab in the Source window. The top-right window is the Environment/History pane of the R Studio interface. The “Environment” tab of this window provides information on the datasets you’ve loaded into R Studio, as well as objects you have defined (we’ll talk about objects more later in the tutorial). -The “History” tab of the window provides a record of the R commands you’ve run in a given session. The bottom-right window is the Files/Plots/Packages/Help/Viewer window. The “Files” tab displays your computer’s directories and file structures and allows you to navigate through them without having to leave the R environment. -The “Plots” tab is the tab where you can view any visualizations (including maps) that you create. Within the “Plots” tab, make note of the “Zoom” button, which you can use to enlarge your maps and visualizations if they’re too compressed in the “Plots” window. Also, note the “Export” button within the “Plots” tab (next to the “Zoom” button); you can use this button to export the displayed map to a .png or .jpeg file that can be used outside of R Studio (you can also export your visualizations programmatically, which we’ll cover how to do later in the tutorial). The “Packages” tab provides information on which packages have been installed, as well as which packages are currently loaded (more on packages in Section 3.4) The “Help” tab displays documentation for R packages and functions. If you want to know more about how a package or function work, simply type a ? followed by the package or function’s name (no space between the question mark and the name) and relevant information will be displayed within the “Help” tab. The “Viewer” tab displays HTML output. If you write code that generates an HTML file, you can view it within the “Viewer” tab. The bottom-left window is the Console/Terminal/Jobs window. The “Console” tab is where you can see your code execute when you run your scripts, as well as certain outputs produced by those scripts. In addition, if there are any error or warning messages, they will be printed to the “Console” tab. You can also type code directly into the console, but as we noted earlier, it is better practice to write your code in a script and then run it from there. The “Terminal” tab allows you to access the terminal (part of the Linux operating system), while the “Jobs” tab allows you to track the status of analyses running in the background. These tabs are not relevant for the tutorial. 3.4 Install Packages R is an open-source programming language for statistical computing that allows you to carry out a wide range of data analysis tasks. One of the big advantages of using R is that it has a very large user community among social scientists and statisticians, who frequently publish packages (which one may think of as workbooks of sorts, containing a well-integrated set of R functions, scripts, data, and documentation) to accomplish certain tasks or implement given procedures. These packages are then shared with the broader community; at this point, anyone who needs to accomplish the tasks to which the package addresses itself can use the package in the context of their own projects. The ability to use published packages considerably simplifies the work of applied social scientists using R; it means that they rarely have to write code entirely from scratch, and can build on the code that others have published. This allows applied researchers to focus on substantive problems, without having to get too bogged down in complicated programming tasks. In the context of this tutorial, generating maps of ICPSR data in R would be relatively complex if we had to write all our code from scratch. However, because we are able to make use of mapping and visualization packages written by other researchers, the task is considerably simpler, and will not require any complicated programming. In this tutorial, we will use a few packages to accomplish our goal of mapping tabular ICPSR data. They are: tmap: The tmap package will allow us to create and customize a publishable map. sf: The sf package allows us to work with spatially explicit data within R. rnaturalearth, rnaturalearthdata, rgeos: In order to visualize our data on a world map, we need a dataset of the world’s country boundaries. One way to get such a dataset is to download it from a public repository, and then load it into R Studio. However, these packages allow us to load a spatial dataset of world boundaries into R Studio without having to actually download anything, which effectively saves us a few steps in the workflow. readxl: The readxl package (part of a broader suite of data science packages known as the “tidyverse”) will allow us to load the tabular ICPSR dataset, which is provided as an Excel file on the ICPSR landing page, into R Studio. dplyr: The dplyr package (also a part of the tidyverse) will allow us to efficiently transform the structure of the initial ICPSR dataset into a more tractable form that is conducive to mapping. To install a package in R, we can use the install.packages function. A function is essentially a programming construct that takes a specified input, runs this input (called an “argument”) through a set of procedures, and returns an output. In the code block below, the name of the package we want to install (here, “tmap”) is enclosed within quotation marks and placed within parentheses after calling the install.packages function. Running the code below will effectively download the tmap package to your computer: # Installs &quot;tmap&quot; package install.packages(&quot;tmap&quot;) To run this code in your own R session: First, copy the code from the codeblock above (you can copy the code to your clipboard by hovering over the top-right of the code-block and clicking the “copy” icon; you can also highlight the code and copy from the Edit menu of your browser). Then, start a new R script within R Studio; if you want to keep a future record of your work, you may want to save it to your computer (perhaps in the same folder to which you downloaded the tutorial data). Paste the code into the script, highlight it, and click the “Run” button that is just above the Source window. Alternatively, instead of copying/pasting, you can manually type in the code from the codeblock into your script. After you’ve run the code, watch the code execute in the console, and look for a message confirming that the package has been successfully installed. Below, we can see how that line of code should look in your script, and how to run it: Figure 3.2: The R Studio Interface Please note that you can follow along with the tutorial on your own computers by transferring all of the subsequent codeblocks into your script in just this way. Run each codeblock in your R Studio environment as you go, and you should be able to replicate the entire tutorial on your computer. You’ll note that the codeblocks in the tutorial usually have a comment, prefaced by a hash (“#”). When writing code in R (or any other command-line interface) it is good practice to preface your code with brief comments that describe what a block of code is supposed to do. Writing these comments can allow someone else (or your future self) read and understand your code more easily than otherwise might be the case. The hash before the comment effectively tells R that the subsequent text is a comment, and should not be run as part of the subsequent code. If you didn’t preface the comment with a hash, R wouldn’t know to ignore the comment when executing the code, and would throw an error message. Now, let’s install the other packages we mentioned above, using the same function: # Installs remainder of necessary packages to complete exercise install.packages(&quot;sf&quot;) install.packages(&quot;rnaturalearth&quot;) install.packages(&quot;rnaturalearthdata&quot;) install.packages(&quot;rgeos&quot;) install.packages(&quot;readxl&quot;) install.packages(&quot;dplyr&quot;) All of the packages we need are now installed! 3.5 Load Libraries However, while our packages are installed in our R environment, they are not yet ready to use. Before we can use our packages, we must load them into our environment. You can think of the process of loading installed packages into a current R environment as analgous to opening up an application on your phone or computer after it has been installed (even if an application is installed, you can’t use it until you open it!). To load (i.e. “open”) an R package, we pass the name of the package we want to load as an argument to the library function. For example, if we want to load the “tmap” package into the current environment, we can type: # Loads &quot;tmap&quot; package library(tmap) At this point, the full suite of the tmap package’s functionality is available for us to use. Now, let’s go ahead and load the remainder of the packages that we’ll need: # Loads remainder of packages library(sf) library(rnaturalearth) library(rnaturalearthdata) library(rgeos) library(tidyverse) library(readxl) library(dplyr) At this point, the packages are loaded and ready to go! One important thing to note regarding the installation and loading of packages is that you only have to install packages once; after a package is installed, there is no need to subsequently reinstall it. However, you must load the packages you need (using the library function) every time you open a new R session. In other words, if you were to close R Studio at this point and open it up later, you would not need to install these packages again (Step 1a), but you would need to load the packages again (Step 1b). 3.6 Set Working Directory Before we can bring our data into R Studio and get started with the tutorial, we have to specify that data’s location on our computer. This step is known as setting one’s working directory. Before setting your working directory, make sure you’ve downloaded the ICPSR dataset, and have placed it in a directory (i.e. folder) on your computer that was specifically created to store this data (See Section 3.1 above for more on the data). If you’re unfamiliar with the concept of file paths, the easiest way to set your working directory is through the R Studio menu. To do so, follow these steps: First, Click on the “Session” button on the R Studio menu at the top of your screen, and then scroll down to the “Set Working Directory” button in the menu that opens up. When you hover over this button, a subsidiary menu that contains a button that says “Choose Directory” will open; click this “Choose Directory” button. In the dialog box that opens up, navigate to the directory that contains the ICPSR data, select it, and click “Open”. At this point, your working directory should be set! The graphic below demonstrates the process of setting one’s working directory through R Studio’s menus: Figure 3.3: Setting Working Directory Via Menus Alternatively, if you are familiar with the concept of file paths, and know the file path to the folder containing the downloaded ICPSR dataset, you can set the working directly using the setwd() function, where the argument to the function is the relevant file path enclosed in quotation marks. For example: # Sets working directory setwd(&quot;/Users/adityaranganath/Documents/git_repositories/icpsr_mapping_manual/tutorial_data&quot;) Note that you won’t want to copy and paste the above codeblock, since your file path will be different; be sure to replace your own file path with the one given above. "],["tutorial.html", "4 Tutorial 4.1 Load and View Data", " 4 Tutorial 4.1 Load and View Data Now that we’ve taken care of those preliminary steps, let’s bring in the tutorial data into our R environment so that we can begin working with it. There are two pieces of data we’ll need to load: The ICPSR tabular dataset on government policy responses to Covid-19 (Section 4.1.1) A spatial dataset of world country boundaries; we will bring this dataset into R Studio via the ne_countries function of the “rnaturalearth” package (Section 4.1.2) 4.1.1 ICPSR Covid-19 Tabular Data When importing tabular data that you have saved on our computer into R Studio, it’s important to first understand some of the details of the data we’re trying to import. The first thing to note is the type of file we’re working with, which is indicated by the file extension; here, we can note that the ICPSR data is a .xlsx file, which means that it’s an Excel file (but note that .xlsx files can also be opened in spreadsheet software programs other than Excel). That means we’ll have to import it into R Studio using a function designed specifically to handle Excel files. To that end, we’ll use the read_excel function from the readxl package. Recall that if you want to learn more about a function or a package, simply type a question mark followed by the package or function name in the console, and relevant information will appear in the “Help” tab of the “Files/Plots/Packages/Help/Viewer” window on the bottom right of our R Studio interface. For example, if we wanted to learn more about the read_excelfunction, we would type ?read_excel into the console. Before using the read_excel function to bring in the , it could be helpful to open up the data outside the R environment to see whether the dataset has any features that we have to account for when loading it into our R environment. When we first open the spreadsheet, it will look something like this: Figure 4.1: ICPSR Dataset in Spreadsheet: Description Tab Note that when we open the spreadsheet, we land on its first tab (or “sheet”), which is titled “Description”. This part of the spreadsheet effectively functions as a data codebook, which we can look through to understand the dataset’s various variables and and assess how they were measured. To open up the actual dataset, we can toggle to the “Dataset” tab by pressing the corresponding button on the bottom-left of the spreadsheet (highlighted in red below): Figure 4.2: ICPSR Dataset in Spreadsheet: Dataset Tab The fact that the ICPSR dataset has two sheets within it is important; it means that when we load it into R, we’ll have to explicitly specify the sheet (i.e. the “Dataset” sheet) we want to import. Now, let’s go ahead and load the “Dataset” sheet of the ICPSR data file. Type the following code into your script, and run it: # Imports &quot;Dataset&quot; sheet from ICPSR Excel file into R Studio, and assigns the dataset to an object called &quot;covid_data&quot; covid_data&lt;-read_excel(&quot;Gov_Responses2Covid19_last.xlsx&quot;, sheet=&quot;Dataset&quot;) Let’s unpack that code. As we noted above, read_excel is the function used to bring in Excel spreadsheet data into R. The function has two arguments; the first (“Gov_Responses2Covid19_last.xlsx”) is the name of the file we want to import, while the second (sheet=“Dataset”) specifies that we specifically want to import the the “Dataset” sheet from that Excel file. This code is then assigned, using &lt;- (R’s assignment operator) to a new object that we call covid_data. This means that the output of the code on the right hand side of the assignment operator is now assigned to the covid_data object. Think of this object as a container of sorts, one which holds, or “contains”, the output of the code to the right of the assignment operator. Object assignment isn’t necessary; we could have brought the data into R Studio by simply typing the code to the right of the assignment operator. However, assigning the dataset to an object allows for the more flexible and intuitive handling of data, so it is a common practice. Note that after typing the code from the previous codeblock into your R script and running it, you still won’t actually see the dataset within the R environment. There are many ways to pull up and inspect the data; in this tutorial, we’ll use the View function, which will bring up the data as a separate tab in the “Source” window. To display the contents of the covid_data object (in other words, the dataset we just imported), type and run the following code: # Brings up dataset held in the &quot;covid_data&quot; object in R Studio&#39;s data viewer View(covid_data) Within your R Studio environment, the result of running View(covid_data) will look something like this (dataset outlined in red): Figure 4.3: Viewing ICPSR Dataset in R Environment You can scroll up/down and across the dataset within the data viewer. 4.1.2 Spatial Data of Country Boundaries "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
